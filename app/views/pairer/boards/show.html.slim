.pull-right
  .text-right
    button.btn.btn-default.btn-sm.space-right2 type="button" onclick=("$('.password-form').toggle()") Change Password
    = link_to "Delete Board", board_path(@board), class: "btn btn-danger btn-sm", data: {method: :delete, confirm: "Are you sure you want to delete this board?"}

  = form_tag board_path(@board), method: :patch, class: 'form-inline password-form', style: 'display:none' do
    h3 Change Board Password

    label Board Password
    input.form-control.password name="board[password]" type="password" value=@board.password style="width: 100px;"
    i.icon-eye-open.space-left onclick="$('input.password').attr('type', ($('input.password').attr('type') == 'text' ? 'password' : 'text'))"

    span.space-left2
      button.btn.btn-xs.btn-success type="submit" Update

= form_tag board_path(@board), method: :patch, class: 'form-inline' do
  - if @board.errors.any?
    .well.well-sm
      div.bold Errors:
      = @board.errors.full_messages.join("<br>").html_safe

  div
    .form-group
      label Board Name
      input.form-control.change-submit name="board[name]" value=@board.name style="width: 180px;"

    br.visible-xs
    span.space-left3.hidden-xs

    .form-group
      label Group Size
      input.form-control.change-submit name="board[group_size]" value=@board.group_size style="width: 50px;"

.row
  .col-sm-9.groups-container
    h3
      .pull-left.space-right2 Groups
      = link_to create_group_board_path(@board), data: {method: :post}, remote: true, class: 'btn btn-sm btn-default' do
        i.icon-plus.space-right
        span Add Group

    .text-center.space-below3 style="margin-top: -53px;"
      = link_to shuffle_board_path(@board), class: "btn btn-success", data: {method: :post} do
        i.icon-refresh.space-right
        span Shuffle

    = render "current_groups"

    div
      = link_to create_group_board_path(@board), data: {method: :post}, remote: true, class: 'btn btn-sm btn-default' do
        i.icon-plus.space-right
        span Add Group

    .hidden-xs = render 'stats'

  .col-sm-3.unassigned-lists-container
    .well.space-above3.board-roles-container
      h3.space-above
        .pull-left.space-right3 Roles

        = form_tag board_path(@board), method: :patch, class: 'form-inline space-below space-left3' do
          = text_field_tag :add_role_name, nil, placeholder: "Role Name", style: "width: 150px;", class: 'form-control'

          span.space-left
            button.btn.btn-sm.btn-default type="submit" Add

      - group_roles = @board.current_groups.flat_map(&:roles_array)
      - unassigned_roles = @board.roles_array - group_roles
      .roles-list data-prev-roles=unassigned_roles style="min-height: 25px;"
        - unassigned_roles.each do |role|
          = render 'role', role: role

      .board-people-container
        h3.space-above5
          .pull-left.space-right3 People

          = form_tag create_person_board_path(@board), remote: true, class: 'form-inline new-person-form space-below space-left3' do
            = text_field_tag :name, nil, placeholder: "Name", style: "width: 150px;", class: 'form-control'

            span.space-left
              button.btn.btn-sm.btn-default type="submit" Add

        - group_person_ids = @board.current_groups.flat_map(&:person_ids_array)
        - unassigned_people = @board.people.select{|x| group_person_ids.exclude?(x.public_id) }.sort_by{|x| x.name }
        .person-list data-prev-person-ids=unassigned_people.map(&:public_id) style="min-height: 40px;"
          - unassigned_people.each do |person|
            = render 'person', person: person

.visible-xs = render 'stats'

css:
  .role,
  .person{
    display: inline-block;
    border: 1px solid black;
    border-radius: 4px;
    padding: 0px 10px 3px 10px;
    margin: 5px 5px;
    line-height: 40px;
    cursor: grab;
    user-select: none;

    box-shadow: 4px 4px rgba(0,0,0, 0.2);
  }

  .groups-container .person .delete,
  .groups-container .role .delete{
    display: none;
  }

  .group-sweep-btn{
    background-color: none;
    color: #333;
    padding: 3px 5px;
    line-height: 1;
    font-size: 20px;
    border: 1px solid #999;
  }
  .group-sweep-btn:hover{
    background-color: #ede175;
    color: #333;
  }
  .group-lock-btn{
    padding: 5px 9px;
  }

  .btn-highlight{
    background-color: orange;
    color: white;
  }
  .btn-highlight:hover{
    background-color: darkorange;
  }

  @media (min-width: 768px){
    .unassigned-lists-container{
      min-width: 360px;
    }
    .groups-container{
      max-width: calc(100% - 360px);
    }
  }

javascript:
  $(function(){

    $('.change-submit').on('change', function(){
      var item = $(this);
      setTimeout(function(){
        if(item.val() == "" && item.is('select[multiple]')){
          item.attr('disabled', true);
          $("<input name='"+item.attr('name')+"' value='"+item.val()+"' />").insertBefore(item);
        }
        item.closest("form").submit();
      }, 1);
    });

    window.init_sortable_lists = function(){
      $(".person-list").sortable({
        connectWith: ".person-list",
        items: "> .person",
        revert: true,
        update: function(){
          var group_id = $(this).data('group-id');
          var prev_person_ids = $(this).data('prev-person-ids');

          var $el = $(this);

          if(!group_id){
            // When on the unassigned list
            return true; // true only skips ajax update, false cancels the entire item drag/move
          }

          var person_ids = [];

          $el.find('.person').each(function(i, item){
            person_ids.push($(item).data('person-id'));
          });

          if(equals(prev_person_ids.sort(), person_ids.sort())){
            return true; // true only skips ajax update, false cancels the entire item drag/move
          }

          if(person_ids.length === 0){
            person_ids.push(""); // to ensure empty array value make the params
          }

          $.ajax({
            url: "#{update_group_board_path(@board, format: :js)}",
            method: "POST",
            data: {group_id: group_id, person_ids: person_ids},
          }).done(function(){
            $el.data('prev-person-ids', person_ids);
          });
        },
      });

      $(".roles-list").sortable({
        connectWith: ".roles-list",
        items: "> .role",
        revert: true,
        update: function(){
          var group_id = $(this).data('group-id');
          var prev_roles = $(this).data('prev-roles');

          $el = $(this);

          if(!group_id){
            // When on the unassigned list
            return true; // true only skips ajax update, false cancels the entire item drag/move
          }

          var roles = [];

          $el.find('.role').each(function(i, item){
            roles.push($(item).data('role-name'));
          });

          if(equals(prev_roles.sort(), roles.sort())){
            return true; // true only skips ajax update, false cancels the entire item drag/move
          }

          if(roles.length === 0){
            roles.push(""); // to ensure empty array value make the params
          }

          $.ajax({
            url: "#{update_group_board_path(@board, format: :js)}",
            method: "POST",
            data: {group_id: group_id, roles: roles},
          }).done(function(){
            $el.data('prev-roles', roles);
          });
        },
      });
    };

    window.init_sortable_lists();

  });
