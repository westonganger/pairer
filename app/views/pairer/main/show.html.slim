.pull-right
  .text-right
    button.btn.btn-default.btn-sm.space-right2 type="button" onclick=("alert('Board password is: #{@board.password}')") View Password
    button.btn.btn-default.btn-sm.space-right2 type="button" onclick=("$('.password-form').toggle()") Change Password
    = link_to "Delete Board", board_path(@board), class: "btn btn-danger btn-sm", data: {method: :delete, confirm: "Are you sure you want to delete the board?"}

  = form_tag board_path(@board), method: :patch, class: 'form-inline password-form', style: 'display:none' do
    h3 Change Board Password

    label Board Password
    input.form-control.password name="board[password]" type="password" value=@board.password style="width: 100px;"
    i.icon-eye-open.space-left onclick="$('input.password').attr('type', ($('input.password').attr('type') == 'text' ? 'password' : 'text'))"

    span.space-left2
      button.btn.btn-xs.btn-success type="submit" Update

h1.space-above
  = "Board: #{@board.name}"
  = link_to "Shuffle", shuffle_board_path(@board), class: "btn btn-success btn-sm space-left4", data: {method: :post}

= form_tag board_path(@board), method: :patch, class: 'form-inline' do
  /h3 Edit Board

  - if @board.errors.any?
    .well.well-sm
      div.bold Errors:
      = @board.errors.full_messages.join("<br>").html_safe
  
  div
    label Board Name
    input.form-control.change-submit name="board[name]" value=@board.name style="width: 150px;"

    span.space-left3
      label Group Size
      input.form-control.change-submit name="board[group_size]" value=@board.group_size style="width: 50px;"

    span.space-left3
      label Number of Iterations to Track
      input.form-control.change-submit name="board[num_iterations_to_track]" value=@board.num_iterations_to_track style="width: 50px;"

.row
  .col-sm-9
    h3 
      .pull-left.space-right2 Groups
      = form_tag create_group_board_path(@board) do
        button.btn.btn-xs.btn-success type="submit" Add

    table.table-bordered.table
      thead
        th
        th style="width: 50%" People
        th Roles
      tbody
        - people_by_id = @board.people.map{|x| [x.to_param, x] }.to_h

        - used_person_ids = @board.current_groups.flat_map{|x| x.person_ids_array }

        - used_roles = @board.current_groups.flat_map{|x| x.roles_array }

        - @board.current_groups.each do |group|
          tr
            td
              div
                = link_to lock_group_board_path(@board, group_id: group), data: {method: :post}, class: 'btn btn-xs btn-default', title: "#{group.locked? ? "Unlock" : "Lock"} Group" do
                  i class=(group.locked? ? 'icon-lock' : 'icon-unlock')

              .space-above2
                = link_to delete_group_board_path(@board, group_id: group), data: {method: :delete, confirm: "Are you sure you want to delete this group?"}, class: 'btn btn-xs btn-danger', title: "Delete Group" do
                  i.icon-trash

            td.person-list data-group-id=group.public_id
              - group.person_ids_array.each do |person_public_id|
                - person = people_by_id[person_public_id]
                - if person
                  = render 'person', person: person

            td.roles-list data-group-id=group.public_id
              - group.roles_array.each do |role|
                = render 'role', role: role

    h3 
      .pull-left Stats
      = link_to "Reset Stats and Groups", board_path(@board, clear_board: true), class: 'btn btn-danger btn-sm space-left2', data: {method: :patch}
    - stats = @board.stats

    - if stats.empty?
      p Cannot show stats with only 1 person on the board
    - else
      ul
        - @board.stats.each do |stat|
          li = stat

    - if Rails.env.development?
      = "Current Groups: #{@board.current_groups.size}"
      br
      = "Current Groups Iteration Numbers: #{@board.current_groups.collect(&:board_iteration_number).uniq.join(", ")}"
      br
      = "Tracked Groups: #{@board.tracked_groups.size}"
      br
      = "Tracked Groups Iteration Numbers: #{@board.tracked_groups.collect(&:board_iteration_number).uniq.join(", ")}"

  .col-sm-3.well
    h3 
      .pull-left.space-right2 Roles

      = form_tag board_path(@board), method: :patch, class: 'form-inline space-below space-left3' do
        = text_field_tag :add_role_name, nil, placeholder: "Role Name", style: "width: 150px;", class: 'form-control'

        span.space-left
          button.btn.btn-sm.btn-success type="submit" Add

    .roles-list style="min-height: 25px;"
      - group_roles = @board.current_groups.flat_map(&:roles_array)
      - @board.roles_array.select{|x| group_roles.exclude?(x) }.each do |role|
        = render 'role', role: role

    h3.space-above5
      .pull-left.space-right4 People

      = form_tag create_person_board_path(@board), class: 'form-inline space-below space-left3' do
        = text_field_tag :name, nil, placeholder: "Name", style: "width: 150px;", class: 'form-control'

        span.space-left
          button.btn.btn-sm.btn-success type="submit" Add

    .person-list style="min-height: 40px;"
      - group_person_ids = @board.current_groups.flat_map(&:person_ids_array)

      - @board.people.select{|x| group_person_ids.exclude?(x.public_id) }.sort_by{|x| x.name }.each do |person|
        = render 'person', person: person

css:
  .role, 
  .person{
    display: inline-block;
    border: 1px solid black;
    border-radius: 4px;
    padding: 0px 10px 3px 10px;
    margin: 5px 5px;
    line-height: 40px;
    cursor: grab;
  }

javascript:
  $(function(){

    $('.change-submit').on('change', function(){
      var item = $(this);
      setTimeout(function(){
        if(item.val() == "" && item.is('select[multiple]')){
          item.attr('disabled', true);
          $("<input name='"+item.attr('name')+"' value='"+item.val()+"' />").insertBefore(item);
        }
        item.closest("form").submit();
      }, 1);
    });

    $(".person-list").sortable({
      connectWith: ".person-list",
      items: "> .person",
      revert: true,
      update: function(){
        var group_id = $(this).data('group-id');
        var prev_person_ids = $(this).data('prev-person-ids');

        var $el = $(this);

        if(group_id){
          var person_ids = []

          $el.find('.person').each(function(i, item){
            person_ids.push($(item).data('person-id'))
          });

          if(!equals(prev_person_ids, person_ids)){
            if(person_ids.length === 0){
              person_ids.push(""); // to ensure empty array value make the params
            }

            $.ajax({
              url: "#{update_group_board_path(@board, format: :js)}",
              method: "POST",
              data: {group_id: group_id, person_ids: person_ids},
            }).done(function(){
              $el.data('prev-person-ids', person_ids);
            });
          }
        }
      },
    });

    $(".roles-list").sortable({
      connectWith: ".roles-list",
      items: "> .role",
      revert: true,
      update: function(){
        var group_id = $(this).data('group-id');
        var prev_roles = $(this).data('prev-roles');

        $el = $(this);

        if(group_id){
          var roles = [];

          $el.find('.role').each(function(i, item){
            roles.push($(item).data('role-name'))
          });

          if(!equals(prev_roles, roles)){
            if(roles.length === 0){
              roles.push(""); // to ensure empty array value make the params
            }

            $.ajax({
              url: "#{update_group_board_path(@board, format: :js)}",
              method: "POST",
              data: {group_id: group_id, roles: roles},
            }).done(function(){
              $el.data('prev-roles', roles);
            });
          }
        }
      },
    });

  });
